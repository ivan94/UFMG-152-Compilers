
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package br.ufmg.dcc.fernandes.ivan.parser;

import br.ufmg.dcc.fernandes.ivan.symbols.*;
import br.ufmg.dcc.fernandes.ivan.inter.*;
import br.ufmg.dcc.fernandes.ivan.inter.Quad.Command;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\003\000\002\002\004\000\002\022" +
    "\002\000\002\003\007\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\010\006\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\006\004\000\002\006\002\000\002\007\006\000\002\007" +
    "\007\000\002\007\011\000\002\007\007\000\002\007\011" +
    "\000\002\007\004\000\002\007\003\000\002\017\006\000" +
    "\002\017\003\000\002\011\005\000\002\011\003\000\002" +
    "\012\005\000\002\012\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\021" +
    "\004\000\002\021\004\000\002\021\003\000\002\020\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\016\004\001\002\000\030\004\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\012\uffff\013\uffff\014\uffff" +
    "\016\uffff\017\uffff\043\uffff\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "\000\030\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\016\ufffc\017\ufffc\043\ufffc\001\002" +
    "\000\030\004\020\005\015\006\016\007\017\010\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\016\ufff4\017\ufff4\043\ufff4\001\002" +
    "\000\020\010\032\012\035\013\026\014\036\016\004\017" +
    "\034\043\033\001\002\000\030\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\017" +
    "\ufffd\043\ufffd\001\002\000\006\020\022\043\021\001\002" +
    "\000\006\020\ufff8\043\ufff8\001\002\000\006\020\ufff7\043" +
    "\ufff7\001\002\000\006\020\ufff6\043\ufff6\001\002\000\006" +
    "\020\ufff9\043\ufff9\001\002\000\004\024\025\001\002\000" +
    "\004\044\023\001\002\000\004\021\024\001\002\000\006" +
    "\020\ufffa\043\ufffa\001\002\000\030\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb" +
    "\017\ufffb\043\ufffb\001\002\000\004\022\134\001\002\000" +
    "\020\010\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\017\ufff5" +
    "\043\ufff5\001\002\000\022\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\016\uffed\017\uffed\043\uffed\001\002\000\006" +
    "\020\115\025\131\001\002\000\004\022\123\001\002\000" +
    "\044\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\001\002\000\024" +
    "\002\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\016" +
    "\ufffe\017\ufffe\043\ufffe\001\002\000\016\010\032\012\035" +
    "\013\026\014\036\016\004\043\033\001\002\000\004\024" +
    "\037\001\002\000\022\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\016\uffee\017\uffee\043\uffee\001\002\000\004\013" +
    "\041\001\002\000\004\022\042\001\002\000\020\015\045" +
    "\022\057\030\055\040\043\043\033\044\061\045\051\001" +
    "\002\000\020\015\045\022\057\030\055\040\043\043\033" +
    "\044\061\045\051\001\002\000\014\021\uffe9\023\uffe9\024" +
    "\uffe9\035\066\036\uffe9\001\002\000\040\021\uffd1\023\uffd1" +
    "\024\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\001\002\000\006\023\120\036\064\001\002\000\040\021" +
    "\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\104\042\105\001\002\000\040\021\uffd9\023\uffd9\024\uffd9" +
    "\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\001\002" +
    "\000\040\021\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\001\002\000\042\020\115\021" +
    "\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\001\002\000\040\021\uffd6\023\uffd6\024\uffd6" +
    "\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\001\002" +
    "\000\020\021\uffe7\023\uffe7\024\uffe7\031\071\034\070\035" +
    "\uffe7\036\uffe7\001\002\000\020\015\045\022\057\030\055" +
    "\040\043\043\033\044\061\045\051\001\002\000\034\021" +
    "\uffdf\023\uffdf\024\uffdf\026\075\027\074\031\uffdf\032\101" +
    "\033\076\034\uffdf\035\uffdf\036\uffdf\037\077\040\100\001" +
    "\002\000\020\015\045\022\057\030\055\040\043\043\033" +
    "\044\061\045\051\001\002\000\020\021\uffe4\023\uffe4\024" +
    "\uffe4\031\uffe4\034\uffe4\035\uffe4\036\uffe4\001\002\000\040" +
    "\021\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\001\002\000\006\023\063\036\064\001" +
    "\002\000\040\021\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002\000\020\015\045" +
    "\022\057\030\055\040\043\043\033\044\061\045\051\001" +
    "\002\000\014\021\uffea\023\uffea\024\uffea\035\066\036\uffea" +
    "\001\002\000\020\015\045\022\057\030\055\040\043\043" +
    "\033\044\061\045\051\001\002\000\020\021\uffe8\023\uffe8" +
    "\024\uffe8\031\071\034\070\035\uffe8\036\uffe8\001\002\000" +
    "\020\015\045\022\057\030\055\040\043\043\033\044\061" +
    "\045\051\001\002\000\020\015\045\022\057\030\055\040" +
    "\043\043\033\044\061\045\051\001\002\000\020\021\uffe6" +
    "\023\uffe6\024\uffe6\031\uffe6\034\uffe6\035\uffe6\036\uffe6\001" +
    "\002\000\020\021\uffe5\023\uffe5\024\uffe5\031\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\001\002\000\020\015\045\022\057\030" +
    "\055\040\043\043\033\044\061\045\051\001\002\000\020" +
    "\015\045\022\057\030\055\040\043\043\033\044\061\045" +
    "\051\001\002\000\020\015\045\022\057\030\055\040\043" +
    "\043\033\044\061\045\051\001\002\000\020\015\045\022" +
    "\057\030\055\040\043\043\033\044\061\045\051\001\002" +
    "\000\020\015\045\022\057\030\055\040\043\043\033\044" +
    "\061\045\051\001\002\000\020\015\045\022\057\030\055" +
    "\040\043\043\033\044\061\045\051\001\002\000\024\021" +
    "\uffe2\023\uffe2\024\uffe2\031\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\037\077\040\100\001\002\000\040\021\uffdd\023\uffdd\024" +
    "\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\104\042\105\001" +
    "\002\000\020\015\045\022\057\030\055\040\043\043\033" +
    "\044\061\045\051\001\002\000\020\015\045\022\057\030" +
    "\055\040\043\043\033\044\061\045\051\001\002\000\040" +
    "\021\uffda\023\uffda\024\uffda\026\uffda\027\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\001\002\000\040\021\uffdb\023\uffdb\024" +
    "\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\001" +
    "\002\000\040\021\uffde\023\uffde\024\uffde\026\uffde\027\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\104\042\105\001\002\000\024\021\uffe1" +
    "\023\uffe1\024\uffe1\031\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\077\040\100\001\002\000\024\021\uffe0\023\uffe0\024\uffe0" +
    "\031\uffe0\034\uffe0\035\uffe0\036\uffe0\037\077\040\100\001" +
    "\002\000\024\021\uffe3\023\uffe3\024\uffe3\031\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\077\040\100\001\002\000\040\021" +
    "\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\001\002\000\020\015\045\022\057\030\055" +
    "\040\043\043\033\044\061\045\051\001\002\000\006\021" +
    "\117\036\064\001\002\000\044\020\uffec\021\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\001\002\000\004\024\121\001\002\000\022\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\016\uffef\017\uffef" +
    "\043\uffef\001\002\000\040\021\uffd7\023\uffd7\024\uffd7\026" +
    "\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\001\002\000" +
    "\020\015\045\022\057\030\055\040\043\043\033\044\061" +
    "\045\051\001\002\000\006\023\125\036\064\001\002\000" +
    "\016\010\032\012\035\013\026\014\036\016\004\043\033" +
    "\001\002\000\022\010\ufff2\011\127\012\ufff2\013\ufff2\014" +
    "\ufff2\016\ufff2\017\ufff2\043\ufff2\001\002\000\016\010\032" +
    "\012\035\013\026\014\036\016\004\043\033\001\002\000" +
    "\022\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1" +
    "\017\ufff1\043\ufff1\001\002\000\020\015\045\022\057\030" +
    "\055\040\043\043\033\044\061\045\051\001\002\000\006" +
    "\024\133\036\064\001\002\000\022\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\043\ufff3\001\002" +
    "\000\020\015\045\022\057\030\055\040\043\043\033\044" +
    "\061\045\051\001\002\000\006\023\136\036\064\001\002" +
    "\000\016\010\032\012\035\013\026\014\036\016\004\043" +
    "\033\001\002\000\022\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\016\ufff0\017\ufff0\043\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\002\004\003\005\001\001\000\004\022" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\010\001\001\000\010\005\012\006" +
    "\011\010\013\001\001\000\010\003\027\007\026\017\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\027" +
    "\007\037\017\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\045" +
    "\012\043\013\053\014\057\015\055\016\046\017\051\020" +
    "\052\021\047\001\001\000\010\017\051\020\052\021\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\051\020\052\021\113\001\001\000\002\001\001" +
    "\000\024\011\061\012\043\013\053\014\057\015\055\016" +
    "\046\017\051\020\052\021\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\064\013\053\014\057\015\055\016\046\017\051" +
    "\020\052\021\047\001\001\000\002\001\001\000\020\013" +
    "\066\014\057\015\055\016\046\017\051\020\052\021\047" +
    "\001\001\000\002\001\001\000\016\014\072\015\055\016" +
    "\046\017\051\020\052\021\047\001\001\000\016\014\071" +
    "\015\055\016\046\017\051\020\052\021\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\112\016\046" +
    "\017\051\020\052\021\047\001\001\000\014\015\111\016" +
    "\046\017\051\020\052\021\047\001\001\000\014\015\110" +
    "\016\046\017\051\020\052\021\047\001\001\000\012\016" +
    "\107\017\051\020\052\021\047\001\001\000\012\016\102" +
    "\017\051\020\052\021\047\001\001\000\014\015\101\016" +
    "\046\017\051\020\052\021\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\051\020\052\021\106\001" +
    "\001\000\010\017\051\020\052\021\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\011\115\012\043\013\053\014\057\015\055\016" +
    "\046\017\051\020\052\021\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\011\123\012\043\013\053\014\057" +
    "\015\055\016\046\017\051\020\052\021\047\001\001\000" +
    "\002\001\001\000\010\003\027\007\125\017\030\001\001" +
    "\000\002\001\001\000\010\003\027\007\127\017\030\001" +
    "\001\000\002\001\001\000\024\011\131\012\043\013\053" +
    "\014\057\015\055\016\046\017\051\020\052\021\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\134" +
    "\012\043\013\053\014\057\015\055\016\046\017\051\020" +
    "\052\021\047\001\001\000\002\001\001\000\010\003\027" +
    "\007\136\017\030\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



                public SymbolsTable table = new SymbolsTable();
                Generator generator = new Generator();
            

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
 table.enterBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= LBRACE NT$0 decls stmts RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 table.leaveBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= decls decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decls ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= type IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 int entry = table.install(id, t);
               if(entry == -1) System.err.println("Symbol "+id+" already defined in "+idleft+":"+idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= type LBRACK INTEGER_LITERAL RBRACK 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayType(t, il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type("INT", 4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Type("CHAR", 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type("FLOAT", 8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new Type("BOOL", 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmts ::= stmts stmt 
            {
              Object RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmts ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= loc EQ bool SEMICOLON 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LType l = (LType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(!b.type.equals(l.type))
                   System.err.println("Invalid type in attribution");
               generator.gen(Command.ATTR, l.array, b.r, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= IF LPAREN bool RPAREN stmt 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= IF LPAREN bool RPAREN stmt ELSE stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= WHILE LPAREN bool RPAREN stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= DO stmt WHILE LPAREN bool RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // loc ::= loc LBRACK bool RBRACK 
            {
              LType RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LType l = (LType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(!b.type.name.equals("INT"))
                   System.err.println("Invalid array accessor");
               if(!l.type.name.equals("Array"))
                   System.err.println("Invalid type");
               Type tipo = ((ArrayType)l.type).innerType;
               String t = generator.newTemp();
               generator.gen(Command.MULT, t, b.r, l.type.size);
               RESULT = new LType(tipo, t, l.array); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // loc ::= IDENTIFIER 
            {
              LType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LType(table.entries[table.getEntry(id)].tipo, null, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool ::= bool OROR join 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool ::= join 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // join ::= join ANDAND equality 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("join",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // join ::= equality 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("join",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // equality ::= equality EQEQ rel 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // equality ::= equality NOTEQ rel 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // equality ::= rel 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel ::= expr LT expr 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel ::= expr LTEQ expr 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel ::= expr GTEQ expr 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel ::= expr GT expr 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel ::= expr 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr PLUS term 
            {
              Integer RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer ex = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer tr = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr MINUS term 
            {
              Integer RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer ex = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer tr = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= term 
            {
              Integer RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer tr = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= term MULT unary 
            {
              Integer RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer tr = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression un = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // term ::= term DIV unary 
            {
              Integer RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer tr = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression un = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= unary 
            {
              Integer RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression un = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unary ::= NOT unary 
            {
              Expression RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression un = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unary ::= MINUS unary 
            {
              Expression RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression un = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String t = generator.newTemp();
               generator.gen(Command.UNMINUS, t, un.r, null);
               RESULT = new Expression();
               RESULT.r = t;
               RESULT.type = un.type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unary ::= factor 
            {
              Expression RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression fct = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fct; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= LPAREN bool RPAREN 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= loc 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LType l = (LType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(l.array, l.type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(il, new Type("INT", 4)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= FLOATING_POINT_LITERAL 
            {
              Expression RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(fl, new Type("FLOAT", 8)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(bl, new Type("BOOL", 1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
